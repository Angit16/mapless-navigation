<?xml version="1.0"?>
<!-- Extensible Markup Language (human and machine readable) -->
<launch>
	<!-- these are the arguments you can pass this launch file, for example 
		paused:=true -->
	<arg name="paused" default="false" />
	<arg name="use_sim_time" default="true" />
	<arg name="gui" default="false" />
	<arg name="headless" default="false" />
	<arg name="debug" default="false" />
        <arg name="world" default="p3dx" />

	<!-- We resume the logic in empty_world.launch, changing only the name of 
		the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find p3dx_gazebo)/worlds/$(arg world).world" />
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="use_sim_time" value="$(arg use_sim_time)" />
		<arg name="headless" value="$(arg headless)" />
	</include>

        <!-- Load the URDF into the ROS Parameter Server -->
	<param name="robot_description"
                command="$(find xacro)/xacro --inorder '$(find p3dx_description)/urdf/pioneer3dx.xacro'" />

	<!-- Run a python script to the send a service call to gazebo_ros to spawn 
                a URDF robot -->
	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
                respawn="false" output="screen" args="-urdf -model p3dx -param robot_description" />

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"></node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  <node name="test_server" pkg="blind_planner"
        type="test_server" output="screen">
    <param name="~kP" value="0.5" />
    <param name="~kA" value="1.0" />
    <param name="~kB" value="-0.8" />
    <param name="~max_linear_speed" value="0.2" />
    <param name="~min_linear_speed" value="0.05" />
    <param name="~max_angular_speed" value="0.7" />
    <param name="~min_angular_speed" value="0.1" />
    <param name="~linear_tolerance" value="0.01" />
    <param name="~angular_tolerance" value="0.04" />
  </node>

  <node name="test_Client" pkg="blind_planner"
        type="test_Client" output="screen">
  </node>

  <node name="rviz" pkg="rviz" type="rviz"
        args="-d /home/anindya/new_ws_4/src/blind_planner/config/new_config.rviz" />

</launch>
